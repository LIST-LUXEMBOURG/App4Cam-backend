# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:lts-alpine

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
cache:
  paths:
    - node_modules/

stages:
  - test
  - analyse
  - build
  - deploy

test:
  stage: test
  except:
    - tags
  tags:
    - hdce_docker
  script:
    - npm ci
    - npm run test
    - npm run test:e2e

sast:
  stage: analyse
  when: manual
  tags:
    - hdce_docker

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  except:
    - tags
  tags:
    - hdce_docker
  script:
    - apk add git
    - npm run build
    - cp config/app4cam.env config/production.env
  artifacts:
    paths:
      - config/
      - dist/
      - scripts/
      - temp/
      - package.json
      - package-lock.json
      - version.txt

deploy:
  stage: deploy
  except:
    - tags
  tags:
    - hdce_docker
  environment:
    name: testing
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Deploy.
    - ssh pi@$SERVER_HOST "
      sudo systemctl stop $CI_PROJECT_NAME &&
      rm --recursive --force $CI_PROJECT_NAME || true &&
      exit
      "
    - apk add rsync
    - rsync --recursive config dist scripts temp package.json package-lock.json version.txt pi@$SERVER_HOST:./$CI_PROJECT_NAME
    - ssh pi@$SERVER_HOST "
      cd $CI_PROJECT_NAME &&
      npm ci --production --ignore-scripts &&
      sudo systemctl start $CI_PROJECT_NAME &&
      exit
      "
