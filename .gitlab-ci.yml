# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:lts-alpine

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
cache:
  paths:
    - node_modules/

stages:
  - test
  - analyse
  - build
  - deploy

test:
  stage: test
  except:
    - tags
  tags:
    - hdce_docker
  script:
    - npm ci
    - npm run test
    - npm run test:e2e

sast:
  stage: analyse
  when: manual
  tags:
    - hdce_docker

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  except:
    - tags
  tags:
    - hdce_docker
  script:
    - apk add git
    - npm run build
    - cp config/app4cam.env config/production.env
  artifacts:
    paths:
      - config/
      - dist/
      - scripts/
      - temp/
      - package.json
      - package-lock.json
      - version.txt

deploy-raspberry-pi:
  stage: deploy
  except:
    - tags
  tags:
    - hdce_docker
  environment:
    name: Raspberry Pi testing
    url: http://$RASPBERRY_PI_HOST
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key variable to the agent store. We're using tr to fix line
    ## endings which makes ed25519 keys work without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$RASPBERRY_PI_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $RASPBERRY_PI_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Adapt DEVICE_TYPE in config file.
    - sed -i '/^DEVICE_TYPE=/s/=.*/=RaspberryPi/' config/production.env

    # Deploy.
    - ssh $RASPBERRY_PI_USER@$RASPBERRY_PI_HOST "
      systemctl --user stop $CI_PROJECT_NAME &&
      rm --force --recursive $CI_PROJECT_NAME/* || true &&
      exit
      "
    - apk add rsync
    - rsync --recursive config dist scripts temp package.json package-lock.json version.txt $RASPBERRY_PI_USER@$RASPBERRY_PI_HOST:./$CI_PROJECT_NAME
    - ssh $RASPBERRY_PI_USER@$RASPBERRY_PI_HOST "
      cd $CI_PROJECT_NAME &&
      npm ci --omit=dev --ignore-scripts &&
      systemctl --user start $CI_PROJECT_NAME &&
      exit
      "

deploy-variscite-mx8m:
  stage: deploy
  except:
    - tags
  tags:
    - hdce_docker
  environment:
    name: Variscite MX8M testing
    url: http://$VARISCITE_MX8M_HOST
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key variable to the agent store. We're using tr to fix line
    ## endings which makes ed25519 keys work without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$VARISCITE_MX8M_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $VARISCITE_MX8M_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Deploy.
    - ssh $VARISCITE_USER@$VARISCITE_MX8M_HOST "
      systemctl --user stop $CI_PROJECT_NAME &&
      rm --force --recursive $CI_PROJECT_NAME/* || true &&
      exit
      "
    - apk add rsync
    - rsync --recursive config dist scripts temp package.json package-lock.json version.txt $VARISCITE_USER@$VARISCITE_MX8M_HOST:./$CI_PROJECT_NAME
    - ssh $VARISCITE_USER@$VARISCITE_MX8M_HOST "
      cd $CI_PROJECT_NAME &&
      npm ci --omit=dev --ignore-scripts &&
      systemctl --user start $CI_PROJECT_NAME &&
      exit
      "

deploy-variscite-mx6:
  stage: deploy
  except:
    - tags
  tags:
    - hdce_docker
  environment:
    name: Variscite MX6 testing
    url: http://$VARISCITE_MX6_HOST
  script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    - 'which ssh-agent || ( apk update && apk add openssh-client )'

    ## Run ssh-agent (inside the build environment).
    - eval $(ssh-agent -s)

    ## Add the SSH key variable to the agent store. We're using tr to fix line
    ## endings which makes ed25519 keys work without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$VARISCITE_MX6_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions.
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Use ssh-keyscan to scan the keys of your private server.
    - ssh-keyscan $VARISCITE_MX6_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Deploy.
    - ssh $VARISCITE_USER@$VARISCITE_MX6_HOST "
      systemctl --user stop $CI_PROJECT_NAME &&
      rm --force --recursive $CI_PROJECT_NAME/* || true &&
      exit
      "
    - apk add rsync
    - rsync --recursive config dist scripts temp package.json package-lock.json version.txt $VARISCITE_USER@$VARISCITE_MX6_HOST:./$CI_PROJECT_NAME
    - ssh $VARISCITE_USER@$VARISCITE_MX6_HOST "
      cd $CI_PROJECT_NAME &&
      npm ci --omit=dev --ignore-scripts &&
      systemctl --user start $CI_PROJECT_NAME &&
      exit
      "
